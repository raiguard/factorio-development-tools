#!/usr/bin/env sh
# vim: ft=sh

help="\
FRUN - Run an instance of Factorio.

Synopsis:
  frun [flags...] -- [factorio args...]

Flags:
  -C                   Fork and connect to localhost:34197.
  -d                   Detach from the calling terminal.
  -f                   Create a temporary instance of the game for one-time use. Allows running multiple instances of the same version at once.
  -h                   Show help text.
  -l <locale>          Fork and set the game's locale.
  -s <save file>       Fork, start headless server and load the given save file.
  -S <scenario>        Fork, start headless server and load the given scenario.
  -a <driver>          Use the specified audio driver.
  -v <driver>          Use the specified video driver.

Developer Flags:
  -a <arch>            Specify architecture. Defaults to x64. (x64, arm64)
  -c <compiler>        Specify compiler. Defaults to GCC. (Clang, GCC)
  -D                   Open Lua documentation instead of running the game.
  -m <mode>            Specify release mode. Defaults to Debug. (Debug, FastDebug, Release, SteamDebug, etc...)
  -t <target>          Specify target. Defaults to factorio-run. (factorio, factorio-run, factorio-test, etc...)

Environment:
  \$FACTORIO_COMPILER
      Specify default compiler. Can be overridden with the -c flag.
  \$FACTORIO_PATH
      If PWD is not a Factorio installation, fall back to this path."

set -e

if [ -e "config-path.cfg" ]; then
  basedir="$PWD"
else
  basedir="$FACTORIO_PATH"
fi

if [ -e "$basedir/fastbuild/fbuild.bff" ]; then
  developer=true
fi

check_developer() {
  if [ "$developer" != true ]; then
    echo "Unable to use developer flags, not in a Factorio development directory."
    exit
  fi
}

arch="x64"
compiler=${FACTORIO_COMPILER-GCC}
mode="Debug"
target="factorio-run"

while getopts 'Cfhl:s:S:v:a:c:DHm:t:' c
do
  case $c in
    C) fork=true; mpargs="--mp-connect localhost:34197" ;;
    d)
      if [ -z "$FRUN_IS_DETATCHED"]; then
        FRUN_IS_DETATCHED=true frun "$@" < /dev/null > /dev/null 2>&1 & disown
        exit
      fi
      ;;
    f) fork=true ;;
    h) printf "%s\\n" "$help"; exit ;;
    l) fork=true; locale="$OPTARG" ;;
    s) fork=true; mpargs="--start-server $OPTARG" ;;
    S) fork=true; mpargs="--start-server-load-scenario $OPTARG" ;;
    a) export SDL_AUDIODRIVER="$OPTARG" ;;
    v) export SDL_VIDEODRIVER="$OPTARG" ;;
    # Developer
    a) check_developer; arch="$OPTARG" ;;
    c) check_developer; compiler="$OPTARG" ;;
    D)
      xdg-open $basedir/scripts/lua_doc/doc-files/index.html < /dev/null > /dev/null 2>&1 & disown
      exit
      ;;
    H) check_developer; headless=true; ;;
    m) check_developer; mode="$OPTARG" ;;
    t) check_developer; target="$OPTARG" ;;
  esac
done
shift $((OPTIND-1))

if [ $developer ]; then
  spec="$mode$arch$compiler"
  if [ $headless ]; then
    spec="$spec-headless"
  fi
  spec="$spec/$target"
  bin="$basedir/bin/$spec"
  if [ -z "$bin" ]; then
    echo "Could not find $spec"
    exit
  fi
else
  bin=$(find "$basedir/bin" -type f | head -1)
fi

# Allow running multiple instances at once
if [ $fork ]; then
  write=$(mktemp -d /tmp/frun.XXX)
  awk -v locale="locale=$locale" -v writedata="write-data=$write" '
    { flag = 1 }
    /write-data/ { flag = 0; print writedata }
    /locale/ { flag = 0; print locale }
    /check-updates/ { flag = 0; print "check-updates=false" }
    flag { print }
  ' $basedir/config/config.ini > $write/config.ini

  ln -s $basedir/atlas-cache.dat $write/atlas-cache.dat
  ln -s $basedir/crop-cache.dat $write/crop-cache.dat

  ln -s $basedir/mods $write/mods
  ln -s $basedir/saves $write/saves
  ln -s $basedir/scenarios $write/scenarios

  ln -s $basedir/server-adminlist.json $write/server-adminlist.json
  ln -s $basedir/server-settings.json $write/server-settings.json

  jq \
    --arg username $(echo "$write" | sed "s~/tmp/frun\.~~") \
    '.["service-username"] = $username | .["service-token"] = ""' \
    $basedir/player-data.json > $write/player-data.json

  echo "Forked - write directory: $write/config.ini"
  forkargs="--config $write/config.ini"
fi

cmd="$bin $forkargs $mpargs $@"
echo "$cmd"
$cmd

if [ -n "$write" ]; then
  rm -rf "$write"
fi
