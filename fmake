#!/usr/bin/env sh
# vim: ft=sh

help="\
FMAKE - Factorio FASTBuild wrapper.

Synopsis:
  fmake [flags...] (compdb|docs) -- [fastbuild args...]

Arguments:
  compdb              Generate Clang compilation database.
  docs                Build documentation.

Flags:
  -a <arch>           Use the given architecture. [x64, arm64]
  -c <compiler>       Use the given compiler. [GCC, Clang, MSVC]
  -h                  Show help text.
  -m <mode>           Build mode. [Debug, FastDebug, Release, FinalRelease, etc...]
  -t <target>         Specify target. [factorio-run, factorio-test, factorio-all-in-one, etc...]

Environment:
  \$FACTORIO_COMPILER
      Specify default compiler. Can be overridden with the -c flag.
  \$FACTORIO_COMPILE_THREADS
      The default number of threads to use for compilation."

if [ ! -e "fastbuild/linux/fbuild" ]; then
  echo "Not in a Factorio source directory"
  exit 1
fi

fbuild="fastbuild/linux/fbuild -config fastbuild/fbuild.bff"

arch="x64"
compiler=${FACTORIO_COMPILER-GCC}
headless=""
mode="Debug"
target="factorio-run"

while getopts 'a:c:hHm:t:' c
do
  case $c in
    a) arch="$OPTARG" ;;
    c) compiler="$OPTARG" ;;
    h) printf "%s\\n" "$help"; exit ;;
    H) headless="headless-" ;;
    m) mode="$OPTARG" ;;
    t) target="$OPTARG"
  esac
done
shift $((OPTIND-1))

if [ "$compiler" = "Clang" ]; then
  export CC=$(whereis -b clang | awk '{ print $2 }')
  export CXX=$(whereis -b clang++ | awk '{ print $2 }')
  export AR=$(whereis -b llvm-ar | awk '{ print $2 }')
fi

if [ -n "$1" ]; then
  case $1 in
    compdb)
      $fbuild $compiler-SteamDebugx64-factorio-without-common-hpp $compiler-Debugx64-factorio-test -compdb
      exit
      ;;
    docs)
      shift
      cd scripts/lua_doc
      ./gen-docs.sh "$@"
      cd ../..
      exit
      ;;
  esac
fi

threads=$FACTORIO_COMPILE_THREADS
if [ -z "$threads" ]; then
  threads=$(grep -c vendor_id /proc/cpuinfo)
  threads=$(($threads - 2))
fi

if [ "$1" = "--" ]; then
  shift
fi

cmd="$fbuild -j$threads $@ $compiler-$headless$mode$arch-$target"
echo "$cmd"
$cmd

if [ $? -eq 0 ]; then
  notify-send -h string:x-dunst-stack-tag:compilation -c compilation "Compilation finished"
else
  notify-send -u critical -h string:x-dunst-stack-tag:compilation -c compilation "Compilation failed"
fi
